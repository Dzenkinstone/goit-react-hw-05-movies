{"version":3,"file":"static/js/971.5b64a4c0.chunk.js","mappings":"8SAEMA,EAAM,mCAECC,EAAS,mCAAG,oGACAC,EAAAA,EAAAA,IAAA,gEACoCF,IAFpC,cACjBG,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAa,mCAAG,WAAMC,GAAN,uFACJJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,oBACqCN,EADrC,oBADI,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,sDAObG,EAAe,mCAAG,WAAMD,GAAN,uFACNJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,4BAC6CN,EAD7C,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfI,EAAe,mCAAG,WAAMF,GAAN,uFACNJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,4BAC6CN,EAD7C,2BADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfK,EAAe,mCAAG,WAAMC,GAAN,uFACNR,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,kBAC6CU,EAD7C,+CADM,cACvBP,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD,+JC9BfO,EAAYC,EAAAA,EAAAA,IAAH,kMASTC,EAAOD,EAAAA,EAAAA,IAAH,0KAMJE,EAAQF,EAAAA,EAAAA,IAAH,gJAOLG,EAAUH,EAAAA,EAAAA,IAAH,4J,SC2BpB,EA5Ca,WACX,IAAQI,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEMf,EAAAA,EAAAA,IAAgBS,GAFtB,OAEXb,EAFW,OAGjBiB,EAAWjB,EAASoB,MACpBC,QAAQC,IAAItB,GAJK,gDAMjBqB,QAAQC,IAAR,MANiB,yDAAH,qDAUlBH,GACD,GAAE,CAACN,KAGF,SAACL,EAAD,UACsB,IAAnBQ,EAAQO,QACP,gEAEAP,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,KAA5B,OACV,UAACjB,EAAD,YACE,SAACC,EAAD,CACEiB,IACEH,EAAY,0CAC2BA,GACnC,0EAENI,IAAI,MAEN,UAACjB,EAAD,YACE,0BAAOe,KACP,uCAAeD,UCvBT,eAACI,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACrB,EAAIsB,GAWvD,OAREtB,IAFFsB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDYCG,GADD,KAmBnB,EEhDD,G","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.js","../node_modules/nanoid/index.browser.js","components/Cast/index.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'd7e465e9850be233d7a3c42efee828b5';\n\nexport const getMovies = async () => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  return responce.data;\n};\n\nexport const getMoviesById = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return responce.data;\n};\n\nexport const getMovieByQuery = async query => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return responce.data;\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  gap: 16px;\n  margin: 20px auto;\n  padding: 0px;\n`;\n\nexport const Item = styled.div`\n  border-radius: 2px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 1px 3px 0px, rgb(0 0 0 / 14%) 0px 1px 1px 0px,\n    rgb(0 0 0 / 12%) 0px 2px 1px -1px;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n`;\n\nexport const Wrapper = styled.div`\n  padding: 10px 0px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: center;\n  justify-content: center;\n`;\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'api';\nimport { useParams } from 'react-router-dom';\nimport { Container, Item, Wrapper } from './Cast.styled';\nimport { Image } from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      try {\n        const responce = await getMovieCredits(id);\n        setCredits(responce.cast);\n        console.log(responce);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCredits();\n  }, [id]);\n\n  return (\n    <Container>\n      {credits.length === 0 ? (\n        <span>There is no cast in this movie...</span>\n      ) : (\n        credits.map(({ profile_path, character, name }) => (\n          <Item key={nanoid()}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : 'https://cdn.pixabay.com/photo/2017/11/10/05/48/user-2935527_960_720.png'\n              }\n              alt=\"\"\n            />\n            <Wrapper>\n              <span>{name}</span>\n              <p>Character: {character}</p>\n            </Wrapper>\n          </Item>\n        ))\n      )}\n    </Container>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import Cast from './Cast';\nexport default Cast;\n"],"names":["KEY","getMovies","axios","responce","data","getMoviesById","movie_id","getMovieCredits","getMovieReviews","getMovieByQuery","query","Container","styled","Item","Image","Wrapper","id","useParams","useState","credits","setCredits","useEffect","fetchCredits","cast","console","log","length","map","profile_path","character","name","src","alt","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}