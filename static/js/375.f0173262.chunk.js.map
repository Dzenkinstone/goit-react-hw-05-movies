{"version":3,"file":"static/js/375.f0173262.chunk.js","mappings":"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","sources":["api.js","components/MoviesInformation/MoviesInformation.styled.js","components/MoviesInformation/MoviesInformation.js","components/BackButton/BackButton.styled.js","components/BackButton/BackButton.js","pages/MoviesDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'd7e465e9850be233d7a3c42efee828b5';\n\nexport const getMovies = async () => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  return responce.data;\n};\n\nexport const getMoviesById = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return responce.data;\n};\n\nexport const getMovieByQuery = async query => {\n  const responce = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return responce.data;\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  border: 1px solid grey;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin-left: 20px;\n  margin-top: 30px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const InformationCollector = styled.div`\n  border-bottom: 1px solid grey;\n  padding: 10px;\n`;\n\nexport const Refs = styled.ul`\n  margin-top: 15px;\n  margin-left: 20px;\n`;\n","import { Container } from './MoviesInformation.styled';\nimport { List } from './MoviesInformation.styled';\nimport { Item } from './MoviesInformation.styled';\nimport { Wrapper } from './MoviesInformation.styled';\nimport { InformationCollector } from './MoviesInformation.styled';\nimport { Refs } from './MoviesInformation.styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MoviesInformation = ({ movies }) => {\n  const {\n    id,\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movies;\n\n  return (\n    <>\n      <Container>\n        <img\n          width=\"300px\"\n          src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n          alt=\"\"\n        />\n        <List>\n          <Item>\n            <h1>{`${title} (${release_date?.substr(0, 4)})`}</h1>\n            <p>User Score: {`${(vote_average * 10).toFixed(0)}%`}</p>\n          </Item>\n          <Item>\n            <strong>Overview</strong>\n            <p>{overview}</p>\n          </Item>\n          <Item>\n            <strong>Genres</strong>\n            <Wrapper>\n              {genres?.map(({ name }) => (\n                <p key={name}>{name}</p>\n              ))}\n            </Wrapper>\n          </Item>\n        </List>\n      </Container>\n\n      <InformationCollector>\n        <h2>Additional Information</h2>\n\n        <Refs>\n          <li>\n            <NavLink to={`/movies/${id}/cast`}>Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to={`/movies/${id}/reviews`}>Reviews</NavLink>\n          </li>\n        </Refs>\n      </InformationCollector>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  cursor: pointer;\n  width: 100px;\n  background-color: white;\n  border: 1px solid rgb(192, 192, 192);\n  padding: 2px 10px;\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 12px;\n  border-radius: 5px;\n  gap: 5px;\n`;\n","import { BsArrowLeftShort } from 'react-icons/bs';\n\nimport { NavLink } from 'react-router-dom';\nimport { Button } from './BackButton.styled';\n\nexport const BackButton = ({ location }) => {\n  return (\n    <>\n      <NavLink to={`${location}`}>\n        <Button>\n          <BsArrowLeftShort />\n          Back\n        </Button>\n      </NavLink>\n    </>\n  );\n};\n","import { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { getMoviesById } from 'api';\n\nimport { MoviesInformation } from 'components/MoviesInformation';\nimport { BackButton } from 'components/BackButton';\n\nconst MoviesDetails = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const { id } = useParams();\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(isLoading);\n  useEffect(() => {\n    const fetchById = async () => {\n      try {\n        setIsLoading(true);\n        const responce = await getMoviesById(id);\n        setMovies(responce);\n      } catch (error) {\n        toast('There is no film with that name...');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchById();\n  }, [id]);\n\n  return (\n    <>\n      <BackButton location={backLinkHref} />\n      <MoviesInformation movies={movies} /> <Toaster />\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["KEY","getMovies","axios","responce","data","getMoviesById","movie_id","getMovieCredits","getMovieReviews","getMovieByQuery","query","Container","styled","List","Item","Wrapper","InformationCollector","Refs","MoviesInformation","movies","id","poster_path","title","release_date","vote_average","overview","genres","width","src","alt","substr","toFixed","map","name","to","Button","BackButton","location","backLinkHref","useLocation","state","from","useParams","useState","setMovies","isLoading","setIsLoading","console","log","useEffect","fetchById","toast","Suspense","fallback"],"sourceRoot":""}